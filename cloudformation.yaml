---
AWSTemplateFormatVersion: 2010-09-09

Description: Creates all resources needed to run a Gif Battle.

# Metadata:

# Parameters:

# Mappings:

# Conditions:

# Transform:

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  Nacl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
  NaclEntryIn443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Nacl
      RuleNumber: 100
      CidrBlock: 0.0.0.0/0
      Egress: false
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: allow
  NaclEntryOut443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Nacl
      RuleNumber: 100
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: 6
      PortRange:
        From: 443
        To: 443
      RuleAction: allow
  NaclEntryIn80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Nacl
      RuleNumber: 200
      CidrBlock: 0.0.0.0/0
      Egress: false
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: allow
  NaclEntryOut80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Nacl
      RuleNumber: 200
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: 6
      PortRange:
        From: 80
        To: 80
      RuleAction: allow
  NaclEntryIn8080:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Nacl
      RuleNumber: 300
      CidrBlock: 0.0.0.0/0
      Egress: false
      Protocol: 6
      PortRange:
        From: 8080
        To: 8080
      RuleAction: allow
  NaclEntryOut8080:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Nacl
      RuleNumber: 300
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: 6
      PortRange:
        From: 8080
        To: 8080
      RuleAction: allow
  NaclEntryIn22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Nacl
      RuleNumber: 400
      CidrBlock: 0.0.0.0/0
      Egress: false
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
  NaclEntryOut22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: Nacl
      RuleNumber: 400
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: 6
      PortRange:
        From: 22
        To: 22
      RuleAction: allow
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/16
      MapPublicIpOnLaunch: true
      VpcId: 
        Ref: VPC
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Gif Battle
      GroupName: Gif Battle
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: VPC
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  Route:
    Type: AWS::EC2::Route
    Properties:
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
  RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: 
        Ref: RouteTable
      SubnetId: 
        Ref: Subnet
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0a887e401f7654935
      SecurityGroupIds:
        - Ref: SecurityGroup
      SubnetId:
        Ref: Subnet
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y docker
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            service docker start
            nvm install node
            yum install git -y
            git clone https://github.com/danhofer/gif-battle.git /home/ec2-user/gif-battle
            echo "REACT_APP_PUBLIC_IP=$(curl ifconfig.me)" >> /home/ec2-user/gif-battle/frontend/.env.production
            docker build -t frontend /home/ec2-user/gif-battle/frontend
            docker run -p 80:5000 -d frontend
            docker build -t backend /home/ec2-user/gif-battle/backend
            docker run -p 8080:8080 -d backend
            aws ec2 create-tags --region $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/[a-z]$//') --resources $(curl http://169.254.169.254/latest/meta-data/instance-id) --tags Key='Name',Value='userdataComplete'

# needs IAM role
# it only needs to edit its own tag... but actually, it doesn't really need to even do that. how to notify user that the game is ready?
# needs to be attached to instance
# outputs need to be simplified

Outputs:
  VPC:
    Value:
      Ref: VPC
    Description: Name of the VPC
  InternetGateway:
    Value:
      Ref: InternetGateway
    Description: Name of the Internet Gateway
  AttachInternetGateway:
    Value:
      Ref: AttachInternetGateway
    Description: Name of the internet gateway attachment
  
# aws cloudformation create-stack --stack-name test --template-body file://cloudformation.yaml --tags Key=Name,Value="Gif Battle"
# aws cloudformation update-stack --stack-name test --template-body file://cloudformation.yaml --tags Key=Name,Value="Gif Battle"
# aws cloudformation delete-stack --stack-name test